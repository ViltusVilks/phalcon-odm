#
# This is a custum and slimmed down PHP base image
#

# Customize PHP FPM dockerfile to slim down unneeded packages
# Source https://github.com/docker-library/php/blob/1eb2c0ab518d874ab8c114c514e16aa09394de14/7.3/alpine3.8/fpm/Dockerfile
FROM alpine:3.10

# dependencies required for running "phpize"
# these get automatically installed and removed by "docker-php-ext-*" (unless they're already installed)
ENV PHPIZE_DEPS \
		autoconf \
		dpkg-dev dpkg \
		file \
		g++ \
		gcc \
		libc-dev \
		make \
		pkgconf \
		re2c

# persistent / runtime deps
RUN apk add --no-cache --virtual .persistent-deps \
		ca-certificates \
		curl \
		tar \
		xz \
        git \
# https://github.com/docker-library/php/issues/494
		openssl

# ensure www-data user exists
RUN set -x \
	&& addgroup -g 82 -S www-data \
	&& adduser -u 82 -D -S -G www-data www-data
# 82 is the standard uid/gid for "www-data" in Alpine
# http://git.alpinelinux.org/cgit/aports/tree/main/apache2/apache2.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/lighttpd/lighttpd.pre-install?h=v3.3.2
# http://git.alpinelinux.org/cgit/aports/tree/main/nginx-initscripts/nginx-initscripts.pre-install?h=v3.3.2

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

COPY docker-php-* /usr/local/bin/

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
#ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2 -Wl,--gc-sections -Wl,--strip-all"

#default
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O3"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O2 -Wl,--hash-style=both -pie"
ENV PHP_VERSION 7.3.8
ENV PHP_URL="https://secure.php.net/get/php-7.3.8.tar.xz/from/this/mirror" PHP_ASC_URL="https://secure.php.net/get/php-7.3.8.tar.xz.asc/from/this/mirror"

RUN set -xe; \
	\
	apk add --no-cache --virtual .fetch-deps \
		wget \
	; \
	\
	mkdir -p /usr/src; \
	cd /usr/src; \
	\
	wget -O php.tar.xz "$PHP_URL"; \
	\
	apk del .fetch-deps

RUN set -xe \
	&& apk add --no-cache --virtual .build-deps \
		$PHPIZE_DEPS \
		argon2-dev \
        bison \
		coreutils \
		curl-dev \
		libedit-dev \
		libxml2-dev \
		openssl-dev \
        gettext-dev \
		\
		freetype-dev \
		libwebp-dev \
		libjpeg-turbo-dev \
		libpng-dev \
	\
	&& export CFLAGS="$PHP_CFLAGS" \
		CPPFLAGS="$PHP_CPPFLAGS" \
		LDFLAGS="$PHP_LDFLAGS" \
	&& chmod +x /usr/local/bin/docker-php-ext-configure \
	&& chmod +x /usr/local/bin/docker-php-ext-enable \
	&& chmod +x /usr/local/bin/docker-php-ext-install \
	&& chmod +x /usr/local/bin/docker-php-source \
	&& docker-php-source extract \
	&& cd /usr/src/php \
	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	&& ./configure \
		--build="$gnuArch" \
		--with-config-file-path="$PHP_INI_DIR" \
		--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
		\
# make sure invalid --configure-flags are fatal errors intead of just warnings
		--enable-option-checking=fatal \
		\
# https://github.com/docker-library/php/issues/439
		--with-mhash \
		\
		--enable-mbstring=shared \
		\
		--with-curl=shared \
		--with-libedit \
		--with-openssl=shared \
		--with-zlib=shared \
        --enable-session=static \
        \
# Customization, we need them shared so php and php-fpm binaries can be as little as possible
        --disable-phpdbg \
        --disable-short-tags \
        --with-layout=GNU \
		--with-pic \
        \
        --enable-phar=shared \
		--enable-posix=shared \
        --enable-dom=shared \
        --enable-fileinfo=shared \
        --with-iconv=shared \
        --enable-json=shared \
        --enable-calendar=shared \
        --enable-sockets=shared \
        --enable-pcntl=shared \
        --enable-pdo=shared \
        --with-gettext=shared \
        --enable-xmlreader=shared \
		--enable-xmlwriter=shared \
		\
		--with-gd=shared \
			--with-freetype-dir=/usr \
			--disable-gd-jis-conv \
			--with-jpeg-dir=/usr \
			--with-png-dir=/usr \
			--with-webp-dir=/usr \
        \
        --without-readline \
        --without-pear \
        --without-sqlite3 \
        --disable-ctype \
        --without-pdo-sqlite \
        --disable-simplexml \
		\
		$PHP_EXTRA_CONFIGURE_ARGS \
	&& time make -j "$(nproc)" \
	&& make install \
	&& { find /usr/local/bin /usr/local/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \
	&& make clean \
	\
# https://github.com/docker-library/php/issues/692 (copy default example "php.ini" files somewhere easily discoverable)
	&& cp -v php.ini-* "$PHP_INI_DIR/" \
	\
	&& cd / \
	&& docker-php-source delete \
	\
	&& runDeps="$( \
		scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
			| tr ',' '\n' \
			| sort -u \
			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
	)" \
	&& apk add --no-cache --virtual .php-rundeps $runDeps \
	\
	&& apk del .build-deps \
	\
	&& rm -rf /tmp/pear ~/.pearrc

RUN ls -la /usr/local/bin/php* \
    && ls -la /usr/local/sbin/php* \
    && echo stop
